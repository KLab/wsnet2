// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    using System;

    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(19)
            {
                { typeof(global::System.Collections.Generic.List<global::System.Collections.Generic.List<global::WSNet2.Query.Condition>>), 0 },
                { typeof(global::System.Collections.Generic.List<global::WSNet2.Query.Condition>), 1 },
                { typeof(global::WSNet2.ClientInfo[]), 2 },
                { typeof(global::WSNet2.RoomInfo[]), 3 },
                { typeof(global::WSNet2.LobbyResponseType), 4 },
                { typeof(global::WSNet2.Query.Op), 5 },
                { typeof(global::WSNet2.RoomOption.LogLevel), 6 },
                { typeof(global::WSNet2.ClientInfo), 7 },
                { typeof(global::WSNet2.CreateParam), 8 },
                { typeof(global::WSNet2.JoinedRoom), 9 },
                { typeof(global::WSNet2.JoinParam), 10 },
                { typeof(global::WSNet2.LobbyResponse), 11 },
                { typeof(global::WSNet2.Query.Condition), 12 },
                { typeof(global::WSNet2.RoomInfo), 13 },
                { typeof(global::WSNet2.RoomOption), 14 },
                { typeof(global::WSNet2.SearchByIdsParam), 15 },
                { typeof(global::WSNet2.SearchByNumbersParam), 16 },
                { typeof(global::WSNet2.SearchCurrentRoomsParam), 17 },
                { typeof(global::WSNet2.SearchParam), 18 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.ListFormatter<global::System.Collections.Generic.List<global::WSNet2.Query.Condition>>();
                case 1: return new global::MessagePack.Formatters.ListFormatter<global::WSNet2.Query.Condition>();
                case 2: return new global::MessagePack.Formatters.ArrayFormatter<global::WSNet2.ClientInfo>();
                case 3: return new global::MessagePack.Formatters.ArrayFormatter<global::WSNet2.RoomInfo>();
                case 4: return new MessagePack.Formatters.WSNet2.LobbyResponseTypeFormatter();
                case 5: return new MessagePack.Formatters.WSNet2.Query_OpFormatter();
                case 6: return new MessagePack.Formatters.WSNet2.RoomOption_LogLevelFormatter();
                case 7: return new MessagePack.Formatters.WSNet2.ClientInfoFormatter();
                case 8: return new MessagePack.Formatters.WSNet2.CreateParamFormatter();
                case 9: return new MessagePack.Formatters.WSNet2.JoinedRoomFormatter();
                case 10: return new MessagePack.Formatters.WSNet2.JoinParamFormatter();
                case 11: return new MessagePack.Formatters.WSNet2.LobbyResponseFormatter();
                case 12: return new MessagePack.Formatters.WSNet2.Query_ConditionFormatter();
                case 13: return new MessagePack.Formatters.WSNet2.RoomInfoFormatter();
                case 14: return new MessagePack.Formatters.WSNet2.RoomOptionFormatter();
                case 15: return new MessagePack.Formatters.WSNet2.SearchByIdsParamFormatter();
                case 16: return new MessagePack.Formatters.WSNet2.SearchByNumbersParamFormatter();
                case 17: return new MessagePack.Formatters.WSNet2.SearchCurrentRoomsParamFormatter();
                case 18: return new MessagePack.Formatters.WSNet2.SearchParamFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.WSNet2
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class LobbyResponseTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::WSNet2.LobbyResponseType>
    {
        public void Serialize(ref MessagePackWriter writer, global::WSNet2.LobbyResponseType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Byte)value);
        }

        public global::WSNet2.LobbyResponseType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::WSNet2.LobbyResponseType)reader.ReadByte();
        }
    }

    public sealed class Query_OpFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::WSNet2.Query.Op>
    {
        public void Serialize(ref MessagePackWriter writer, global::WSNet2.Query.Op value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Byte)value);
        }

        public global::WSNet2.Query.Op Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::WSNet2.Query.Op)reader.ReadByte();
        }
    }

    public sealed class RoomOption_LogLevelFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::WSNet2.RoomOption.LogLevel>
    {
        public void Serialize(ref MessagePackWriter writer, global::WSNet2.RoomOption.LogLevel value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::WSNet2.RoomOption.LogLevel Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::WSNet2.RoomOption.LogLevel)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name



// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.WSNet2
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class ClientInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::WSNet2.ClientInfo>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public ClientInfoFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "id", 0 },
                { "props", 1 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("id"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("props"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::WSNet2.ClientInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Id, options);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<byte[]>().Serialize(ref writer, value.Props, options);
        }

        public global::WSNet2.ClientInfo Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Id__ = default(string);
            var __Props__ = default(byte[]);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Id__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Props__ = formatterResolver.GetFormatterWithVerify<byte[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::WSNet2.ClientInfo();
            ____result.Id = __Id__;
            ____result.Props = __Props__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreateParamFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::WSNet2.CreateParam>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public CreateParamFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "room", 0 },
                { "client", 1 },
                { "emk", 2 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("room"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("client"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("emk"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::WSNet2.CreateParam value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::WSNet2.RoomOption>().Serialize(ref writer, value.roomOption, options);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::WSNet2.ClientInfo>().Serialize(ref writer, value.clientInfo, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.encryptedMACKey, options);
        }

        public global::WSNet2.CreateParam Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __roomOption__ = default(global::WSNet2.RoomOption);
            var __clientInfo__ = default(global::WSNet2.ClientInfo);
            var __encryptedMACKey__ = default(string);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __roomOption__ = formatterResolver.GetFormatterWithVerify<global::WSNet2.RoomOption>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __clientInfo__ = formatterResolver.GetFormatterWithVerify<global::WSNet2.ClientInfo>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __encryptedMACKey__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::WSNet2.CreateParam();
            ____result.roomOption = __roomOption__;
            ____result.clientInfo = __clientInfo__;
            ____result.encryptedMACKey = __encryptedMACKey__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class JoinedRoomFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::WSNet2.JoinedRoom>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public JoinedRoomFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "room_info", 0 },
                { "players", 1 },
                { "url", 2 },
                { "auth_key", 3 },
                { "master_id", 4 },
                { "deadline", 5 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("room_info"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("players"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("url"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("auth_key"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("master_id"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("deadline"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::WSNet2.JoinedRoom value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(6);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::WSNet2.RoomInfo>().Serialize(ref writer, value.roomInfo, options);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::WSNet2.ClientInfo[]>().Serialize(ref writer, value.players, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.url, options);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.authKey, options);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.masterId, options);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.Write(value.deadline);
        }

        public global::WSNet2.JoinedRoom Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __roomInfo__ = default(global::WSNet2.RoomInfo);
            var __players__ = default(global::WSNet2.ClientInfo[]);
            var __url__ = default(string);
            var __authKey__ = default(string);
            var __masterId__ = default(string);
            var __deadline__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __roomInfo__ = formatterResolver.GetFormatterWithVerify<global::WSNet2.RoomInfo>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __players__ = formatterResolver.GetFormatterWithVerify<global::WSNet2.ClientInfo[]>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __url__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __authKey__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __masterId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __deadline__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::WSNet2.JoinedRoom();
            ____result.roomInfo = __roomInfo__;
            ____result.players = __players__;
            ____result.url = __url__;
            ____result.authKey = __authKey__;
            ____result.masterId = __masterId__;
            ____result.deadline = __deadline__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class JoinParamFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::WSNet2.JoinParam>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public JoinParamFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "query", 0 },
                { "client", 1 },
                { "emk", 2 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("query"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("client"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("emk"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::WSNet2.JoinParam value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::System.Collections.Generic.List<global::WSNet2.Query.Condition>>>().Serialize(ref writer, value.queries, options);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::WSNet2.ClientInfo>().Serialize(ref writer, value.clientInfo, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.encryptedMACKey, options);
        }

        public global::WSNet2.JoinParam Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __queries__ = default(global::System.Collections.Generic.List<global::System.Collections.Generic.List<global::WSNet2.Query.Condition>>);
            var __clientInfo__ = default(global::WSNet2.ClientInfo);
            var __encryptedMACKey__ = default(string);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __queries__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::System.Collections.Generic.List<global::WSNet2.Query.Condition>>>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __clientInfo__ = formatterResolver.GetFormatterWithVerify<global::WSNet2.ClientInfo>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __encryptedMACKey__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::WSNet2.JoinParam();
            ____result.queries = __queries__;
            ____result.clientInfo = __clientInfo__;
            ____result.encryptedMACKey = __encryptedMACKey__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class LobbyResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::WSNet2.LobbyResponse>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public LobbyResponseFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "msg", 0 },
                { "type", 1 },
                { "room", 2 },
                { "rooms", 3 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("msg"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("type"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("room"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("rooms"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::WSNet2.LobbyResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.msg, options);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::WSNet2.LobbyResponseType>().Serialize(ref writer, value.type, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::WSNet2.JoinedRoom>().Serialize(ref writer, value.room, options);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::WSNet2.RoomInfo[]>().Serialize(ref writer, value.rooms, options);
        }

        public global::WSNet2.LobbyResponse Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __msg__ = default(string);
            var __type__ = default(global::WSNet2.LobbyResponseType);
            var __room__ = default(global::WSNet2.JoinedRoom);
            var __rooms__ = default(global::WSNet2.RoomInfo[]);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __msg__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __type__ = formatterResolver.GetFormatterWithVerify<global::WSNet2.LobbyResponseType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __room__ = formatterResolver.GetFormatterWithVerify<global::WSNet2.JoinedRoom>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __rooms__ = formatterResolver.GetFormatterWithVerify<global::WSNet2.RoomInfo[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::WSNet2.LobbyResponse();
            ____result.msg = __msg__;
            ____result.type = __type__;
            ____result.room = __room__;
            ____result.rooms = __rooms__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class Query_ConditionFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::WSNet2.Query.Condition>
    {


        public void Serialize(ref MessagePackWriter writer, global::WSNet2.Query.Condition value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.key, options);
            formatterResolver.GetFormatterWithVerify<global::WSNet2.Query.Op>().Serialize(ref writer, value.op, options);
            formatterResolver.GetFormatterWithVerify<byte[]>().Serialize(ref writer, value.val, options);
        }

        public global::WSNet2.Query.Condition Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __key__ = default(string);
            var __op__ = default(global::WSNet2.Query.Op);
            var __val__ = default(byte[]);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __key__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __op__ = formatterResolver.GetFormatterWithVerify<global::WSNet2.Query.Op>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __val__ = formatterResolver.GetFormatterWithVerify<byte[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::WSNet2.Query.Condition(__key__, __op__, __val__);
            ____result.key = __key__;
            ____result.op = __op__;
            ____result.val = __val__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RoomInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::WSNet2.RoomInfo>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public RoomInfoFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "id", 0 },
                { "app_id", 1 },
                { "host_id", 2 },
                { "visible", 3 },
                { "joinable", 4 },
                { "watchable", 5 },
                { "number", 6 },
                { "search_group", 7 },
                { "max_players", 8 },
                { "players", 9 },
                { "watchers", 10 },
                { "public_props", 11 },
                { "private_props", 12 },
                { "created", 13 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("id"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("app_id"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("host_id"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("visible"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("joinable"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("watchable"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("number"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("search_group"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("max_players"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("players"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("watchers"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("public_props"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("private_props"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("created"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::WSNet2.RoomInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(14);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.id, options);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.appId, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.Write(value.hostId);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.Write(value.visible);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.Write(value.joinable);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.Write(value.watchable);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.Write(value.number);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.Write(value.searchGroup);
            writer.WriteRaw(this.____stringByteKeys[8]);
            writer.Write(value.maxPlayers);
            writer.WriteRaw(this.____stringByteKeys[9]);
            writer.Write(value.players);
            writer.WriteRaw(this.____stringByteKeys[10]);
            writer.Write(value.watchers);
            writer.WriteRaw(this.____stringByteKeys[11]);
            formatterResolver.GetFormatterWithVerify<byte[]>().Serialize(ref writer, value.publicProps, options);
            writer.WriteRaw(this.____stringByteKeys[12]);
            formatterResolver.GetFormatterWithVerify<byte[]>().Serialize(ref writer, value.privateProps, options);
            writer.WriteRaw(this.____stringByteKeys[13]);
            writer.Write(value.created);
        }

        public global::WSNet2.RoomInfo Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __id__ = default(string);
            var __appId__ = default(string);
            var __hostId__ = default(uint);
            var __visible__ = default(bool);
            var __joinable__ = default(bool);
            var __watchable__ = default(bool);
            var __number__ = default(int);
            var __searchGroup__ = default(uint);
            var __maxPlayers__ = default(uint);
            var __players__ = default(uint);
            var __watchers__ = default(uint);
            var __publicProps__ = default(byte[]);
            var __privateProps__ = default(byte[]);
            var __created__ = default(long);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __id__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __appId__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __hostId__ = reader.ReadUInt32();
                        break;
                    case 3:
                        __visible__ = reader.ReadBoolean();
                        break;
                    case 4:
                        __joinable__ = reader.ReadBoolean();
                        break;
                    case 5:
                        __watchable__ = reader.ReadBoolean();
                        break;
                    case 6:
                        __number__ = reader.ReadInt32();
                        break;
                    case 7:
                        __searchGroup__ = reader.ReadUInt32();
                        break;
                    case 8:
                        __maxPlayers__ = reader.ReadUInt32();
                        break;
                    case 9:
                        __players__ = reader.ReadUInt32();
                        break;
                    case 10:
                        __watchers__ = reader.ReadUInt32();
                        break;
                    case 11:
                        __publicProps__ = formatterResolver.GetFormatterWithVerify<byte[]>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        __privateProps__ = formatterResolver.GetFormatterWithVerify<byte[]>().Deserialize(ref reader, options);
                        break;
                    case 13:
                        __created__ = reader.ReadInt64();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::WSNet2.RoomInfo();
            ____result.id = __id__;
            ____result.appId = __appId__;
            ____result.hostId = __hostId__;
            ____result.visible = __visible__;
            ____result.joinable = __joinable__;
            ____result.watchable = __watchable__;
            ____result.number = __number__;
            ____result.searchGroup = __searchGroup__;
            ____result.maxPlayers = __maxPlayers__;
            ____result.players = __players__;
            ____result.watchers = __watchers__;
            ____result.publicProps = __publicProps__;
            ____result.privateProps = __privateProps__;
            ____result.created = __created__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RoomOptionFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::WSNet2.RoomOption>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public RoomOptionFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "visible", 0 },
                { "joinable", 1 },
                { "watchable", 2 },
                { "with_number", 3 },
                { "search_group", 4 },
                { "client_deadline", 5 },
                { "max_players", 6 },
                { "public_props", 7 },
                { "private_props", 8 },
                { "log_level", 9 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("visible"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("joinable"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("watchable"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("with_number"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("search_group"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("client_deadline"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("max_players"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("public_props"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("private_props"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("log_level"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::WSNet2.RoomOption value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(10);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.visible);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.Write(value.joinable);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.Write(value.watchable);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.Write(value.withNumber);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.Write(value.searchGroup);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.Write(value.clientDeadline);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.Write(value.maxPlayers);
            writer.WriteRaw(this.____stringByteKeys[7]);
            formatterResolver.GetFormatterWithVerify<byte[]>().Serialize(ref writer, value.publicProps, options);
            writer.WriteRaw(this.____stringByteKeys[8]);
            formatterResolver.GetFormatterWithVerify<byte[]>().Serialize(ref writer, value.privateProps, options);
            writer.WriteRaw(this.____stringByteKeys[9]);
            formatterResolver.GetFormatterWithVerify<global::WSNet2.RoomOption.LogLevel>().Serialize(ref writer, value.logLevel, options);
        }

        public global::WSNet2.RoomOption Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __visible__ = default(bool);
            var __joinable__ = default(bool);
            var __watchable__ = default(bool);
            var __withNumber__ = default(bool);
            var __searchGroup__ = default(uint);
            var __clientDeadline__ = default(uint);
            var __maxPlayers__ = default(uint);
            var __publicProps__ = default(byte[]);
            var __privateProps__ = default(byte[]);
            var __logLevel__ = default(global::WSNet2.RoomOption.LogLevel);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __visible__ = reader.ReadBoolean();
                        break;
                    case 1:
                        __joinable__ = reader.ReadBoolean();
                        break;
                    case 2:
                        __watchable__ = reader.ReadBoolean();
                        break;
                    case 3:
                        __withNumber__ = reader.ReadBoolean();
                        break;
                    case 4:
                        __searchGroup__ = reader.ReadUInt32();
                        break;
                    case 5:
                        __clientDeadline__ = reader.ReadUInt32();
                        break;
                    case 6:
                        __maxPlayers__ = reader.ReadUInt32();
                        break;
                    case 7:
                        __publicProps__ = formatterResolver.GetFormatterWithVerify<byte[]>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __privateProps__ = formatterResolver.GetFormatterWithVerify<byte[]>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __logLevel__ = formatterResolver.GetFormatterWithVerify<global::WSNet2.RoomOption.LogLevel>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::WSNet2.RoomOption();
            ____result.visible = __visible__;
            ____result.joinable = __joinable__;
            ____result.watchable = __watchable__;
            ____result.withNumber = __withNumber__;
            ____result.searchGroup = __searchGroup__;
            ____result.clientDeadline = __clientDeadline__;
            ____result.maxPlayers = __maxPlayers__;
            ____result.publicProps = __publicProps__;
            ____result.privateProps = __privateProps__;
            ____result.logLevel = __logLevel__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SearchByIdsParamFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::WSNet2.SearchByIdsParam>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public SearchByIdsParamFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "ids", 0 },
                { "query", 1 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("ids"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("query"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::WSNet2.SearchByIdsParam value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<string[]>().Serialize(ref writer, value.ids, options);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::System.Collections.Generic.List<global::WSNet2.Query.Condition>>>().Serialize(ref writer, value.queries, options);
        }

        public global::WSNet2.SearchByIdsParam Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __ids__ = default(string[]);
            var __queries__ = default(global::System.Collections.Generic.List<global::System.Collections.Generic.List<global::WSNet2.Query.Condition>>);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __ids__ = formatterResolver.GetFormatterWithVerify<string[]>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __queries__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::System.Collections.Generic.List<global::WSNet2.Query.Condition>>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::WSNet2.SearchByIdsParam();
            ____result.ids = __ids__;
            ____result.queries = __queries__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SearchByNumbersParamFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::WSNet2.SearchByNumbersParam>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public SearchByNumbersParamFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "numbers", 0 },
                { "query", 1 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("numbers"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("query"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::WSNet2.SearchByNumbersParam value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<int[]>().Serialize(ref writer, value.numbers, options);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::System.Collections.Generic.List<global::WSNet2.Query.Condition>>>().Serialize(ref writer, value.queries, options);
        }

        public global::WSNet2.SearchByNumbersParam Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __numbers__ = default(int[]);
            var __queries__ = default(global::System.Collections.Generic.List<global::System.Collections.Generic.List<global::WSNet2.Query.Condition>>);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __numbers__ = formatterResolver.GetFormatterWithVerify<int[]>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __queries__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::System.Collections.Generic.List<global::WSNet2.Query.Condition>>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::WSNet2.SearchByNumbersParam();
            ____result.numbers = __numbers__;
            ____result.queries = __queries__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SearchCurrentRoomsParamFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::WSNet2.SearchCurrentRoomsParam>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public SearchCurrentRoomsParamFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "query", 0 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("query"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::WSNet2.SearchCurrentRoomsParam value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::System.Collections.Generic.List<global::WSNet2.Query.Condition>>>().Serialize(ref writer, value.queries, options);
        }

        public global::WSNet2.SearchCurrentRoomsParam Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __queries__ = default(global::System.Collections.Generic.List<global::System.Collections.Generic.List<global::WSNet2.Query.Condition>>);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __queries__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::System.Collections.Generic.List<global::WSNet2.Query.Condition>>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::WSNet2.SearchCurrentRoomsParam();
            ____result.queries = __queries__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SearchParamFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::WSNet2.SearchParam>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public SearchParamFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "group", 0 },
                { "query", 1 },
                { "limit", 2 },
                { "joinable", 3 },
                { "watchable", 4 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("group"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("query"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("limit"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("joinable"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("watchable"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::WSNet2.SearchParam value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(5);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.group);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::System.Collections.Generic.List<global::WSNet2.Query.Condition>>>().Serialize(ref writer, value.queries, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.Write(value.limit);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.Write(value.checkJoinable);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.Write(value.checkWatchable);
        }

        public global::WSNet2.SearchParam Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __group__ = default(uint);
            var __queries__ = default(global::System.Collections.Generic.List<global::System.Collections.Generic.List<global::WSNet2.Query.Condition>>);
            var __limit__ = default(int);
            var __checkJoinable__ = default(bool);
            var __checkWatchable__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __group__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __queries__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::System.Collections.Generic.List<global::WSNet2.Query.Condition>>>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __limit__ = reader.ReadInt32();
                        break;
                    case 3:
                        __checkJoinable__ = reader.ReadBoolean();
                        break;
                    case 4:
                        __checkWatchable__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::WSNet2.SearchParam();
            ____result.group = __group__;
            ____result.queries = __queries__;
            ____result.limit = __limit__;
            ____result.checkJoinable = __checkJoinable__;
            ____result.checkWatchable = __checkWatchable__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

